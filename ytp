from selenium import webdriver
import selenium.webdriver.support.ui as ui
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from time import sleep
import os
from urllib import parse
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.expected_conditions import presence_of_element_located

class YoutubePlayer:
    url = "https://www.youtube.com/"
    def __init__(self):
        #driver = webdriver.PhantomJS(executable_path="/home/douasin/youtube_skip/phantomjs-2.5.0-beta-ubuntu-xenial/bin/phantomjs")
        self.black_sheet = self.load_black_sheet()
        self.has_ad = False
        self.current = None
        self.duration = None
        self.driver = webdriver.Firefox(executable_path=r"C:\Users\halit\PycharmProjects\ChatBot\Required Files and Drivers\geckodriver.exe")
        self.wait = ui.WebDriverWait(self.driver, 10)
        self.total_skip_ad = 0
        self.oncekiurl = None

    def load_black_sheet(self):
        black_sheet = []
        if os.path.exists('black_sheet.txt'):
            print("Find Black Sheet")
            with open('black_sheet.txt', 'r') as finn:
                for i in  finn.readlines():
                    black_sheet.append(i.strip())

        else:
            print("Doesn't find black_sheet.txt.")
            print("You can create one.")

        return black_sheet

    def go_to_youtube_homepage(self):
        self.driver.get(YoutubePlayer.url)
        sleep(1)

    def choose_do(self):
        print("1: Search Song")
        print("2: Start or Stop")
        #youtube.next_button.click()

    def search_box(self):
        #return self.driver.find_element_by_class_name(
        #        "ytd-searchbox")
        return self.driver.find_element_by_id("search")

    def lookup_time(self):
        self.hover_on_video()
        sleep(0.2)
        self.current  = self.left_time()
        self.duration = self.right_time()
        self.hover_out()

    def left_time(self):
        try:
            time_current = self.driver.find_element_by_class_name(
                    "ytp-time-current")
            return time_current.get_attribute('textContent')
            #return time_current.text
        except:
            return None

    def right_time(self):
        try:
            time_duration = self.driver.find_element_by_class_name(
                    "ytp-time-duration")
            self.hover_out()
            return time_duration.get_attribute('textContent')
            #return time_duration.text
        except:
            return None

    def check_end(self):
        if self.current and self.duration:
            return self.current == self.duration
        else:
            return False

    def player(self):
        return self.driver.find_element_by_class_name(
                "html5-video-container")

    def time_display(self):
        return self.driver.find_element_by_class_name(
                "ytp-time-display")

    def play_button(self):
        buton = self.driver.find_element_by_class_name(
                "ytp-play-button")
        print(buton.get_attribute("title"))
        print(buton.get_attribute("aria-label"))
        if buton.get_attribute("aria-label")=="Duraklat (k)":
            return "Video zaten oynuyor"
        else:
            buton.click()
            return "Başlattım"

    def stop_button(self):
        buton = self.driver.find_element_by_class_name("ytp-play-button")
        if buton.get_attribute("aria-label")=="Oynat (k)":
            return "Video zaten durmuş"
        else:
            buton.click()
            return "Durdurdum"

    def volume_up(self):
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_UP)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_UP)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_UP)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_UP)
        return " "

    def volume_down(self):
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_DOWN)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_DOWN)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_DOWN)
        self.driver.find_element_by_class_name("ytp-volume-panel").send_keys(Keys.ARROW_DOWN)
        return " "

    def mute(self):
        buton = self.driver.find_element_by_class_name("ytp-mute-button ytp-button")
        if buton.get_attribute("aria-label") == "Sessiz (m)":
            self.driver.find_element_by_class_name("ytp-mute-button ytp-button").click()

    def open_sound(self):
        buton = self.driver.find_element_by_class_name("ytp-mute-button ytp-button")
        if buton.get_attribute("aria-label") == "Sesi aç (m)":
            self.driver.find_element_by_class_name("ytp-mute-button ytp-button").click()

    def next_button(self):
        return self.driver.find_element_by_class_name(
                "ytp-next-button")

    def next_video(self):
        videos = self.driver.find_elements_by_id(
                "video-title")
        videos = [i for i in videos if i.is_displayed()]

        return videos[0]

    def go_next_video(self):
        self.current = None
        self.duration = None
        self.next_video().click()
        sleep(1)
        self.skip_ad()
        return "Sonraki video olan " + str(self.title() + " geçtim.")

    def title(self):
        return self.driver.find_element_by_class_name("style-scope ytd-video-primary-info-renderer").text.splitlines()[0]

    def search_and_go_first(self, search_word=None,onceki=False):

        if onceki ==False:
            query = parse.quote(search_word)
            url = "https://www.youtube.com/results?search_query=" + query
            self.oncekiurl = url
        else :
            url = self.oncekiurl
        self.driver.get(url)
        wait = WebDriverWait(self.driver, 10).until(
            presence_of_element_located((By.XPATH, '//*[@id="logo"]')))

        video_items = self.driver.find_elements_by_id("thumbnail")
        video_items = [i for i in video_items if i.is_displayed()]
        video_items[0].click()
        sleep(1)
        self.skip_ad()
        return "Sana " + str(self.title() + " açtım.")


    def previous_video(self):
        self.driver.back()
        return " "

    def hover_on_video(self):
        hover = ActionChains(self.driver).move_to_element(
                self.driver.find_element_by_class_name(
                    "html5-main-video"))
        hover.perform()

    def hover_out(self):
        hover = ActionChains(self.driver).move_to_element(
                self.driver.find_element_by_class_name(
                    "yt-view-count-renderer"))
        hover.perform()

    def skip_ad(self):
        reklamgecildi = 0
        while reklamgecildi <3:
            try:
                self.driver.find_element_by_class_name("ytp-ad-preview-container").click()
                print("Reklam izleniyor")
                sleep(2)
            except:
                sleep(1)
                try:
                    self.driver.find_element_by_class_name("ytp-ad-skip-button-container").click()
                    reklamgecildi+=1
                    return "Reklam geçildi"
                except:
                    reklamgecildi+=1

    def check_hate(self):
        title = self.title().lower()
        for hate in self.black_sheet:
            if hate in title:
                return True
        return False

